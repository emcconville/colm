##### LM #####

context ctx
	i: int
	j: int
	k: int

	lex
		ignore /space+/
		literal `* `( `)
		token id /[a-zA-Z_]+/ 
	end

	def foo [id]

	def item 
		[id]
	|	[foo]
	|	[`( item* `)]
		{
			i = 0
			j = i + 1
			k = j + 1
			print( k '\n' )
		}

	def start 
		[item*]
end # ctx

cons CTX: ctx[]
parse Input: ctx::start( CTX ) [ stdin ]
print( Input )

##### IN #####
a b c ( d e f )
##### EXP #####
2
a b c ( d e f )
